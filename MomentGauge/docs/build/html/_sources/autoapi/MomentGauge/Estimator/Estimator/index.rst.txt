:py:mod:`MomentGauge.Estimator.Estimator`
=========================================

.. py:module:: MomentGauge.Estimator.Estimator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   MomentGauge.Estimator.Estimator.BaseEstimator
   MomentGauge.Estimator.Estimator.EstimatorPolar2D




.. py:class:: BaseEstimator(constant)

   
   The Base Class for Estimators

   Estimate moments from samples draw from distributions.

   :param constant:
                    dictionary with the following keys

                        **'m'** : float - the mass of particle considered

                        **'kB'** : float - the Boltzmann constant
   :type constant: dict

   .. attribute:: pi

      the value of :math:`\pi`

      :type: float

   .. attribute:: m

      the mass of particle considered

      :type: float

   .. attribute:: kB

      the Boltzmann constant

      :type: float

   .. attribute:: constant

      dictionary with the keys containing **'m'** and **'kB'**

      :type: dict

   .. py:method:: get_sample_moment(statistics, samples, weights, gauge_paras=())

      Calculate the moment provided samples :math:`\mathbf{u}_i` and weiths :math:`w_i` of the distribution as follows

      .. math::
          :nowrap:

          \begin{equation}
          M_{i_1,\cdots,i_k}(\mathbf{g})=\int \phi_{i_1,\cdots,i_k}(\mathbf{u}, \mathbf{g}) f(\mathbf{u}) d \mathbf{u} \approx \sum_{i=1}^N w_i \phi_{i_1,\cdots,i_k}(\mathbf{u}_i, \mathbf{g}),
          \end{equation}

      in which :math:`\phi_{i_1,\cdots,i_k}` is a float-valued or tensor-valued function, :math:`\mathbf{g}` is extra gauge parameters that may or may not be requested by the moments :math:`\phi`.


      :param statistics:
                         A float-valued or tensor-valued function :math:`\phi_{i_1,\cdots,i_k}` ( **u** , :math:`*` **gauge_paras** ) with

                             **Parameters**:

                                 **u** : float array of shape (3) - The 3D sample vector :math:`\mathbf{u}`

                                 :math:`*` **gauge_paras** : - Arbitrary many extra parameters such as :math:`\mathbf{g}`. The :math:`*` refers to the unpacking operator in python.

                             **Returns**:

                                 float or array of arbitrary shape :math:`(d_1,\cdots,d_k)` -- the value of the statistic :math:`\phi_{i_1,\cdots,i_k}(\mathbf{u},\mathbf{g})`
      :type statistics: function
      :param samples: N  samples of 3-dim vectors :math:`\mathbf{u}_i` draw from the distribution.
      :type samples: float array of shape (N,3)
      :param weights: N non-negative weights :math:`w_i` for each samples.
      :type weights: float array of shape (N)
      :param gauge_paras: A tuple ( para1, para2, ... ) containing arbitrary many extra parameters the statistics function :math:`\phi_{i_1,\cdots,i_k}` required. Defaut is (), an empty tuple.
      :type gauge_paras: tuple

      :returns: The moment value :math:`M_{i_1,\cdots,i_k}(\mathbf{g})`
      :rtype: float or array of arbitrary shape :math:`(d_1,\cdots,d_k)`


   .. py:method:: cal_macro_quant(samples, weights)
      :abstractmethod:

      Compute the macroscopic quantities of distribution including number density :math:`n`, density :math:`\rho`, flow velocities :math:`\mathbf{v} = \{v_\alpha, \alpha \in \{x,y,z\}\}`, temperature :math:`T`, pressure :math:`p`, stress :math:`\{\sigma_{\alpha \beta}, \alpha, \beta \in \{x,y,z\}\}` and heat flux :math:`\{q_{\alpha}, \alpha \in \{x,y,z\}\}`.

      .. math::
          :nowrap:

          \begin{equation}
          \begin{split}
          n &= \frac{\rho}{m}= \int f(\mathbf{u}) d^3 \mathbf{u} \\
          v_\alpha &= \frac{1}{n}\int u_\alpha f(\mathbf{u}) d^3 \mathbf{u}\\
          p  &= n k_B T = \frac{1}{3} \int m c_\alpha c_\alpha f(\mathbf{u}) d^3 \mathbf{u} \\
          \sigma_{\alpha\beta} &= \int m c_\alpha c_\beta f(\mathbf{u}) d^3 \mathbf{u} - p \delta_{\alpha\beta} \\
          \epsilon  &= \frac{3}{2} k_B T  = \frac{1}{n}\int \frac{m}{2} \mathbf{c}^2 f(\mathbf{u}) d^3 \mathbf{u} \\
          q_\alpha &= \int \frac{m}{2} c_\alpha \mathbf{c}^2 f(\mathbf{u}) d^3 \mathbf{u}; \quad \alpha, \beta \in \{x,y,z\}
          \end{split}
          \end{equation}

      in which :math:`m` is the mass of gas molecule.


      :param samples: N  samples of 3-dim vectors :math:`\mathbf{u}_i` draw from the distribution.
      :type samples: float array of shape (N,3)
      :param weights: N non-negative weights :math:`w_i` for each samples.
      :type weights: float array of shape (N)

      :returns: Array containing macroscopic quantities :math:`\{ \rho, n, v_x, v_y, v_z, T, p, \sigma_{xx}, \sigma_{xy}, \sigma_{xz}, \sigma_{yy}, \sigma_{yz}, \sigma_{zz}, q_x, q_y, q_z \}`
      :rtype: float array of shape (16)



.. py:class:: EstimatorPolar2D(constant)

   Bases: :py:obj:`BaseEstimator`

   
   The Estimators for 3D distribution with polar symmetry.

   Estimate moments from samples draw from distributions.

   :param constant:
                    dictionary with the following keys

                        **'m'** : float - the mass of particle considered

                        **'kB'** : float - the Boltzmann constant
   :type constant: dict

   .. attribute:: pi

      the value of :math:`\pi`

      :type: float

   .. attribute:: m

      the mass of particle considered

      :type: float

   .. attribute:: kB

      the Boltzmann constant

      :type: float

   .. attribute:: constant

      dictionary with the keys containing **'m'** and **'kB'**

      :type: dict

   .. py:method:: cal_macro_quant(samples, weights)

      Compute the macroscopic quantities of distribution including number density :math:`n`, density :math:`\rho`, flow velocities :math:`\mathbf{v} = \{v_\alpha, \alpha \in \{x,y,z\}\}`, temperature :math:`T`, pressure :math:`p`, stress :math:`\{\sigma_{\alpha \beta}, \alpha, \beta \in \{x,y,z\}\}` and heat flux :math:`\{q_{\alpha}, \alpha \in \{x,y,z\}\}`.

      .. math::
          :nowrap:

          \begin{equation}
          \begin{split}
          n &= \frac{\rho}{m}= \int f(\mathbf{u}) d^3 \mathbf{u} \\
          v_\alpha &= \frac{1}{n}\int u_\alpha f(\mathbf{u}) d^3 \mathbf{u}\\
          p  &= n k_B T = \frac{1}{3} \int m c_\alpha c_\alpha f(\mathbf{u}) d^3 \mathbf{u} \\
          \sigma_{\alpha\beta} &= \int m c_\alpha c_\beta f(\mathbf{u}) d^3 \mathbf{u} - p \delta_{\alpha\beta} \\
          \epsilon  &= \frac{3}{2} k_B T  = \frac{1}{n}\int \frac{m}{2} \mathbf{c}^2 f(\mathbf{u}) d^3 \mathbf{u} \\
          q_\alpha &= \int \frac{m}{2} c_\alpha \mathbf{c}^2 f(\mathbf{u}) d^3 \mathbf{u}; \quad \alpha, \beta \in \{x,y,z\}
          \end{split}
          \end{equation}

      in which :math:`m` is the mass of gas molecule.


      :param samples: N  samples of 3-dim vectors :math:`\mathbf{u}_i` draw from the distribution.
      :type samples: float array of shape (N,3)
      :param weights: N non-negative weights :math:`w_i` for each samples.
      :type weights: float array of shape (N)

      :returns: Array containing macroscopic quantities :math:`\{ \rho, n, v_x, v_y, v_z, T, p, \sigma_{xx}, \sigma_{xy}, \sigma_{xz}, \sigma_{yy}, \sigma_{yz}, \sigma_{zz}, q_x, q_y, q_z \}`
      :rtype: float array of shape (16)


   .. py:method:: get_sample_moment(statistics, samples, weights, gauge_paras=())

      Calculate the moment provided samples :math:`\mathbf{u}_i` and weiths :math:`w_i` of the distribution as follows

      .. math::
          :nowrap:

          \begin{equation}
          M_{i_1,\cdots,i_k}(\mathbf{g})=\int \phi_{i_1,\cdots,i_k}(\mathbf{u}, \mathbf{g}) f(\mathbf{u}) d \mathbf{u} \approx \sum_{i=1}^N w_i \phi_{i_1,\cdots,i_k}(\mathbf{u}_i, \mathbf{g}),
          \end{equation}

      in which :math:`\phi_{i_1,\cdots,i_k}` is a float-valued or tensor-valued function, :math:`\mathbf{g}` is extra gauge parameters that may or may not be requested by the moments :math:`\phi`.


      :param statistics:
                         A float-valued or tensor-valued function :math:`\phi_{i_1,\cdots,i_k}` ( **u** , :math:`*` **gauge_paras** ) with

                             **Parameters**:

                                 **u** : float array of shape (3) - The 3D sample vector :math:`\mathbf{u}`

                                 :math:`*` **gauge_paras** : - Arbitrary many extra parameters such as :math:`\mathbf{g}`. The :math:`*` refers to the unpacking operator in python.

                             **Returns**:

                                 float or array of arbitrary shape :math:`(d_1,\cdots,d_k)` -- the value of the statistic :math:`\phi_{i_1,\cdots,i_k}(\mathbf{u},\mathbf{g})`
      :type statistics: function
      :param samples: N  samples of 3-dim vectors :math:`\mathbf{u}_i` draw from the distribution.
      :type samples: float array of shape (N,3)
      :param weights: N non-negative weights :math:`w_i` for each samples.
      :type weights: float array of shape (N)
      :param gauge_paras: A tuple ( para1, para2, ... ) containing arbitrary many extra parameters the statistics function :math:`\phi_{i_1,\cdots,i_k}` required. Defaut is (), an empty tuple.
      :type gauge_paras: tuple

      :returns: The moment value :math:`M_{i_1,\cdots,i_k}(\mathbf{g})`
      :rtype: float or array of arbitrary shape :math:`(d_1,\cdots,d_k)`



